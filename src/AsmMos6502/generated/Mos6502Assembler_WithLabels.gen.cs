// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmMos6502.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
using System.Runtime.CompilerServices;

namespace AsmMos6502;

partial class Mos6502Assembler
{
    /// <summary>
    /// Add with carry. ADC instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler ADC(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.ADC((ushort)address.Address, x), address);
    /// <summary>
    /// Add with carry. ADC instruction with addressing mode AbsoluteY.
    /// </summary>
    public Mos6502Assembler ADC(Mos6502Label address, Mos6502RegisterY y)
        => AddInstruction(Mos6502InstructionFactory.ADC((ushort)address.Address, y), address);
    /// <summary>
    /// Add with carry. ADC instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler ADC(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.ADC((ushort)address.Address), address);
    /// <summary>
    /// Logical AND. AND instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler AND(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.AND((ushort)address.Address, x), address);
    /// <summary>
    /// Logical AND. AND instruction with addressing mode AbsoluteY.
    /// </summary>
    public Mos6502Assembler AND(Mos6502Label address, Mos6502RegisterY y)
        => AddInstruction(Mos6502InstructionFactory.AND((ushort)address.Address, y), address);
    /// <summary>
    /// Logical AND. AND instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler AND(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.AND((ushort)address.Address), address);
    /// <summary>
    /// Arithmetic shift left. ASL instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler ASL(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.ASL((ushort)address.Address, x), address);
    /// <summary>
    /// Arithmetic shift left. ASL instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler ASL(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.ASL((ushort)address.Address), address);
    /// <summary>
    /// Branch if carry clear. BCC instruction with addressing mode Relative.
    /// </summary>
    public Mos6502Assembler BCC(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.BCC((sbyte)address.Address), address);
    /// <summary>
    /// Branch if carry set. BCS instruction with addressing mode Relative.
    /// </summary>
    public Mos6502Assembler BCS(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.BCS((sbyte)address.Address), address);
    /// <summary>
    /// Branch if equal. BEQ instruction with addressing mode Relative.
    /// </summary>
    public Mos6502Assembler BEQ(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.BEQ((sbyte)address.Address), address);
    /// <summary>
    /// Bit test. BIT instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler BIT(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.BIT((ushort)address.Address), address);
    /// <summary>
    /// Branch if minus. BMI instruction with addressing mode Relative.
    /// </summary>
    public Mos6502Assembler BMI(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.BMI((sbyte)address.Address), address);
    /// <summary>
    /// Branch if not equal. BNE instruction with addressing mode Relative.
    /// </summary>
    public Mos6502Assembler BNE(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.BNE((sbyte)address.Address), address);
    /// <summary>
    /// Branch if positive. BPL instruction with addressing mode Relative.
    /// </summary>
    public Mos6502Assembler BPL(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.BPL((sbyte)address.Address), address);
    /// <summary>
    /// Branch if overflow clear. BVC instruction with addressing mode Relative.
    /// </summary>
    public Mos6502Assembler BVC(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.BVC((sbyte)address.Address), address);
    /// <summary>
    /// Branch if overflow set. BVS instruction with addressing mode Relative.
    /// </summary>
    public Mos6502Assembler BVS(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.BVS((sbyte)address.Address), address);
    /// <summary>
    /// Compare. CMP instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler CMP(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.CMP((ushort)address.Address, x), address);
    /// <summary>
    /// Compare. CMP instruction with addressing mode AbsoluteY.
    /// </summary>
    public Mos6502Assembler CMP(Mos6502Label address, Mos6502RegisterY y)
        => AddInstruction(Mos6502InstructionFactory.CMP((ushort)address.Address, y), address);
    /// <summary>
    /// Compare. CMP instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler CMP(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.CMP((ushort)address.Address), address);
    /// <summary>
    /// Compare X register. CPX instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler CPX(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.CPX((ushort)address.Address), address);
    /// <summary>
    /// Compare Y register. CPY instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler CPY(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.CPY((ushort)address.Address), address);
    /// <summary>
    /// Decrement memory. DEC instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler DEC(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.DEC((ushort)address.Address, x), address);
    /// <summary>
    /// Decrement memory. DEC instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler DEC(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.DEC((ushort)address.Address), address);
    /// <summary>
    /// Logical Exclusive OR (XOR). EOR instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler EOR(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.EOR((ushort)address.Address, x), address);
    /// <summary>
    /// Logical Exclusive OR (XOR). EOR instruction with addressing mode AbsoluteY.
    /// </summary>
    public Mos6502Assembler EOR(Mos6502Label address, Mos6502RegisterY y)
        => AddInstruction(Mos6502InstructionFactory.EOR((ushort)address.Address, y), address);
    /// <summary>
    /// Logical Exclusive OR (XOR). EOR instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler EOR(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.EOR((ushort)address.Address), address);
    /// <summary>
    /// Increment memory. INC instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler INC(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.INC((ushort)address.Address, x), address);
    /// <summary>
    /// Increment memory. INC instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler INC(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.INC((ushort)address.Address), address);
    /// <summary>
    /// Unconditional Jump. JMP instruction with addressing mode Indirect.
    /// </summary>
    public Mos6502Assembler JMP(Mos6502IndirectLabel address)
        => AddInstruction(Mos6502InstructionFactory.JMP(new Mos6502Indirect((byte)address.ZpLabel.Address)), address.ZpLabel);
    /// <summary>
    /// Unconditional Jump. JMP instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler JMP(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.JMP((ushort)address.Address), address);
    /// <summary>
    /// Jump to subroutine. JSR instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler JSR(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.JSR((ushort)address.Address), address);
    /// <summary>
    /// Load accumulator. LDA instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler LDA(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.LDA((ushort)address.Address, x), address);
    /// <summary>
    /// Load accumulator. LDA instruction with addressing mode AbsoluteY.
    /// </summary>
    public Mos6502Assembler LDA(Mos6502Label address, Mos6502RegisterY y)
        => AddInstruction(Mos6502InstructionFactory.LDA((ushort)address.Address, y), address);
    /// <summary>
    /// Load accumulator. LDA instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler LDA(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.LDA((ushort)address.Address), address);
    /// <summary>
    /// Load X register. LDX instruction with addressing mode AbsoluteY.
    /// </summary>
    public Mos6502Assembler LDX(Mos6502Label address, Mos6502RegisterY y)
        => AddInstruction(Mos6502InstructionFactory.LDX((ushort)address.Address, y), address);
    /// <summary>
    /// Load X register. LDX instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler LDX(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.LDX((ushort)address.Address), address);
    /// <summary>
    /// Load Y register. LDY instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler LDY(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.LDY((ushort)address.Address, x), address);
    /// <summary>
    /// Load Y register. LDY instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler LDY(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.LDY((ushort)address.Address), address);
    /// <summary>
    /// Logical shift right. LSR instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler LSR(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.LSR((ushort)address.Address, x), address);
    /// <summary>
    /// Logical shift right. LSR instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler LSR(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.LSR((ushort)address.Address), address);
    /// <summary>
    /// Logical Inclusive OR. ORA instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler ORA(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.ORA((ushort)address.Address, x), address);
    /// <summary>
    /// Logical Inclusive OR. ORA instruction with addressing mode AbsoluteY.
    /// </summary>
    public Mos6502Assembler ORA(Mos6502Label address, Mos6502RegisterY y)
        => AddInstruction(Mos6502InstructionFactory.ORA((ushort)address.Address, y), address);
    /// <summary>
    /// Logical Inclusive OR. ORA instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler ORA(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.ORA((ushort)address.Address), address);
    /// <summary>
    /// Rotate left. ROL instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler ROL(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.ROL((ushort)address.Address, x), address);
    /// <summary>
    /// Rotate left. ROL instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler ROL(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.ROL((ushort)address.Address), address);
    /// <summary>
    /// Rotate right. ROR instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler ROR(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.ROR((ushort)address.Address, x), address);
    /// <summary>
    /// Rotate right. ROR instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler ROR(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.ROR((ushort)address.Address), address);
    /// <summary>
    /// Subtract with carry. SBC instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler SBC(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.SBC((ushort)address.Address, x), address);
    /// <summary>
    /// Subtract with carry. SBC instruction with addressing mode AbsoluteY.
    /// </summary>
    public Mos6502Assembler SBC(Mos6502Label address, Mos6502RegisterY y)
        => AddInstruction(Mos6502InstructionFactory.SBC((ushort)address.Address, y), address);
    /// <summary>
    /// Subtract with carry. SBC instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler SBC(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.SBC((ushort)address.Address), address);
    /// <summary>
    /// Store accumulator. STA instruction with addressing mode AbsoluteX.
    /// </summary>
    public Mos6502Assembler STA(Mos6502Label address, Mos6502RegisterX x)
        => AddInstruction(Mos6502InstructionFactory.STA((ushort)address.Address, x), address);
    /// <summary>
    /// Store accumulator. STA instruction with addressing mode AbsoluteY.
    /// </summary>
    public Mos6502Assembler STA(Mos6502Label address, Mos6502RegisterY y)
        => AddInstruction(Mos6502InstructionFactory.STA((ushort)address.Address, y), address);
    /// <summary>
    /// Store accumulator. STA instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler STA(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.STA((ushort)address.Address), address);
    /// <summary>
    /// Store X register. STX instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler STX(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.STX((ushort)address.Address), address);
    /// <summary>
    /// Store Y register. STY instruction with addressing mode Absolute.
    /// </summary>
    public Mos6502Assembler STY(Mos6502Label address)
        => AddInstruction(Mos6502InstructionFactory.STY((ushort)address.Address), address);
}
