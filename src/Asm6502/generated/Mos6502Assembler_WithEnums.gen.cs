// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by Asm6502.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
using System.Runtime.CompilerServices;

namespace Asm6502;

partial class Mos6502Assembler
{
    /// <summary>
    /// Add with carry. ADC_Imm instruction (0x69) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: C, Z, V, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler ADC_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.ADC_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
    /// <summary>
    /// Logical AND. AND_Imm instruction (0x29) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: Z, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler AND_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.AND_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
    /// <summary>
    /// Compare. CMP_Imm instruction (0xc9) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: C, Z, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler CMP_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.CMP_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
    /// <summary>
    /// Compare X register. CPX_Imm instruction (0xe0) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: C, Z, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler CPX_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.CPX_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
    /// <summary>
    /// Compare Y register. CPY_Imm instruction (0xc0) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: C, Z, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler CPY_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.CPY_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
    /// <summary>
    /// Logical Exclusive OR (XOR). EOR_Imm instruction (0x49) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: Z, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler EOR_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.EOR_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
    /// <summary>
    /// Load accumulator. LDA_Imm instruction (0xa9) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: Z, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler LDA_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.LDA_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
    /// <summary>
    /// Load X register. LDX_Imm instruction (0xa2) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: Z, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler LDX_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.LDX_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
    /// <summary>
    /// Load Y register. LDY_Imm instruction (0xa0) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: Z, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler LDY_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.LDY_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
    /// <summary>
    /// Logical Inclusive OR. ORA_Imm instruction (0x09) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: Z, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler ORA_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.ORA_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
    /// <summary>
    /// Subtract with carry. SBC_Imm instruction (0xe9) with addressing mode Immediate.
    /// </summary>
    /// <remarks>
    /// <code>
    /// Cycles: 2
    ///   Size: 2
    ///  Flags: C, Z, V, N
    /// </code>
    /// </remarks>
    public Mos6502Assembler SBC_Imm<TEnum>(TEnum immediate, [CallerFilePath] string debugFilePath = "", [CallerLineNumber] int debugLineNumber = 0) where TEnum : struct, Enum
        => AddInstruction(Mos6502InstructionFactory.SBC_Imm(Unsafe.As<TEnum, byte>(ref immediate)), debugFilePath, debugLineNumber);
}
