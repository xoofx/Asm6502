// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by Asm6502.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
namespace Asm6502;

/// <summary>
/// Internal tables to help decoding <see cref="Mos6510OpCode"/>.
/// </summary>
internal static partial class Mos6510Tables
{
    private static ReadOnlySpan<byte> MapOpCodeToAddressingMode => new byte[256]
    {
        0x06, 0x08, 0x06, 0x08, 0x0B, 0x0B, 0x0B, 0x0B, 0x06, 0x05, 0x04, 0x05, 0x01, 0x01, 0x01, 0x01, 
        0x0A, 0x09, 0x06, 0x09, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x03, 0x06, 0x03, 0x02, 0x02, 0x02, 0x02, 
        0x01, 0x08, 0x06, 0x08, 0x0B, 0x0B, 0x0B, 0x0B, 0x06, 0x05, 0x04, 0x05, 0x01, 0x01, 0x01, 0x01, 
        0x0A, 0x09, 0x06, 0x09, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x03, 0x06, 0x03, 0x02, 0x02, 0x02, 0x02, 
        0x06, 0x08, 0x06, 0x08, 0x0B, 0x0B, 0x0B, 0x0B, 0x06, 0x05, 0x04, 0x05, 0x01, 0x01, 0x01, 0x01, 
        0x0A, 0x09, 0x06, 0x09, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x03, 0x06, 0x03, 0x02, 0x02, 0x02, 0x02, 
        0x06, 0x08, 0x06, 0x08, 0x0B, 0x0B, 0x0B, 0x0B, 0x06, 0x05, 0x04, 0x05, 0x07, 0x01, 0x01, 0x01, 
        0x0A, 0x09, 0x06, 0x09, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x03, 0x06, 0x03, 0x02, 0x02, 0x02, 0x02, 
        0x05, 0x08, 0x05, 0x08, 0x0B, 0x0B, 0x0B, 0x0B, 0x06, 0x05, 0x06, 0x05, 0x01, 0x01, 0x01, 0x01, 
        0x0A, 0x09, 0x06, 0x09, 0x0C, 0x0C, 0x0D, 0x0D, 0x06, 0x03, 0x06, 0x03, 0x02, 0x02, 0x03, 0x03, 
        0x05, 0x08, 0x05, 0x08, 0x0B, 0x0B, 0x0B, 0x0B, 0x06, 0x05, 0x06, 0x05, 0x01, 0x01, 0x01, 0x01, 
        0x0A, 0x09, 0x06, 0x09, 0x0C, 0x0C, 0x0D, 0x0D, 0x06, 0x03, 0x06, 0x03, 0x02, 0x02, 0x03, 0x03, 
        0x05, 0x08, 0x05, 0x08, 0x0B, 0x0B, 0x0B, 0x0B, 0x06, 0x05, 0x06, 0x05, 0x01, 0x01, 0x01, 0x01, 
        0x0A, 0x09, 0x06, 0x09, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x03, 0x06, 0x03, 0x02, 0x02, 0x02, 0x02, 
        0x05, 0x08, 0x05, 0x08, 0x0B, 0x0B, 0x0B, 0x0B, 0x06, 0x05, 0x06, 0x05, 0x01, 0x01, 0x01, 0x01, 
        0x0A, 0x09, 0x06, 0x09, 0x0C, 0x0C, 0x0C, 0x0C, 0x06, 0x03, 0x06, 0x03, 0x02, 0x02, 0x02, 0x02, 
    };
    
    private static ReadOnlySpan<byte> MapOpCodeToMnemonic => new byte[256]
    {
        11, // [0x00] BRK_Implied 
        35, // [0x01] ORA_IndirectX 
        63, // [0x02] JAM_Implied 
        74, // [0x03] SLO_IndirectX 
        34, // [0x04] NOP_ZeroPage 
        35, // [0x05] ORA_ZeroPage 
        3 , // [0x06] ASL_ZeroPage 
        74, // [0x07] SLO_ZeroPage 
        37, // [0x08] PHP_Implied 
        35, // [0x09] ORA_Immediate 
        3 , // [0x0A] ASL_Accumulator 
        58, // [0x0B] ANC_Immediate 
        34, // [0x0C] NOP_Absolute 
        35, // [0x0D] ORA_Absolute 
        3 , // [0x0E] ASL_Absolute 
        74, // [0x0F] SLO_Absolute 
        10, // [0x10] BPL_Relative 
        35, // [0x11] ORA_IndirectY 
        63, // [0x12] JAM_12_Implied 
        74, // [0x13] SLO_IndirectY 
        34, // [0x14] NOP_ZeroPageX 
        35, // [0x15] ORA_ZeroPageX 
        3 , // [0x16] ASL_ZeroPageX 
        74, // [0x17] SLO_ZeroPageX 
        14, // [0x18] CLC_Implied 
        35, // [0x19] ORA_AbsoluteY 
        34, // [0x1A] NOP_1A_Implied 
        74, // [0x1B] SLO_AbsoluteY 
        34, // [0x1C] NOP_AbsoluteX 
        35, // [0x1D] ORA_AbsoluteX 
        3 , // [0x1E] ASL_AbsoluteX 
        74, // [0x1F] SLO_AbsoluteX 
        29, // [0x20] JSR_Absolute 
        2 , // [0x21] AND_IndirectX 
        63, // [0x22] JAM_22_Implied 
        67, // [0x23] RLA_IndirectX 
        7 , // [0x24] BIT_ZeroPage 
        2 , // [0x25] AND_ZeroPage 
        40, // [0x26] ROL_ZeroPage 
        67, // [0x27] RLA_ZeroPage 
        39, // [0x28] PLP_Implied 
        2 , // [0x29] AND_Immediate 
        40, // [0x2A] ROL_Accumulator 
        58, // [0x2B] ANC_2B_Immediate 
        7 , // [0x2C] BIT_Absolute 
        2 , // [0x2D] AND_Absolute 
        40, // [0x2E] ROL_Absolute 
        67, // [0x2F] RLA_Absolute 
        8 , // [0x30] BMI_Relative 
        2 , // [0x31] AND_IndirectY 
        63, // [0x32] JAM_32_Implied 
        67, // [0x33] RLA_IndirectY 
        34, // [0x34] NOP_34_ZeroPageX 
        2 , // [0x35] AND_ZeroPageX 
        40, // [0x36] ROL_ZeroPageX 
        67, // [0x37] RLA_ZeroPageX 
        45, // [0x38] SEC_Implied 
        2 , // [0x39] AND_AbsoluteY 
        34, // [0x3A] NOP_3A_Implied 
        67, // [0x3B] RLA_AbsoluteY 
        34, // [0x3C] NOP_3C_AbsoluteX 
        2 , // [0x3D] AND_AbsoluteX 
        40, // [0x3E] ROL_AbsoluteX 
        67, // [0x3F] RLA_AbsoluteX 
        42, // [0x40] RTI_Implied 
        24, // [0x41] EOR_IndirectX 
        63, // [0x42] JAM_42_Implied 
        75, // [0x43] SRE_IndirectX 
        34, // [0x44] NOP_44_ZeroPage 
        24, // [0x45] EOR_ZeroPage 
        33, // [0x46] LSR_ZeroPage 
        75, // [0x47] SRE_ZeroPage 
        36, // [0x48] PHA_Implied 
        24, // [0x49] EOR_Immediate 
        33, // [0x4A] LSR_Accumulator 
        57, // [0x4B] ALR_Immediate 
        28, // [0x4C] JMP_Absolute 
        24, // [0x4D] EOR_Absolute 
        33, // [0x4E] LSR_Absolute 
        75, // [0x4F] SRE_Absolute 
        12, // [0x50] BVC_Relative 
        24, // [0x51] EOR_IndirectY 
        63, // [0x52] JAM_52_Implied 
        75, // [0x53] SRE_IndirectY 
        34, // [0x54] NOP_54_ZeroPageX 
        24, // [0x55] EOR_ZeroPageX 
        33, // [0x56] LSR_ZeroPageX 
        75, // [0x57] SRE_ZeroPageX 
        16, // [0x58] CLI_Implied 
        24, // [0x59] EOR_AbsoluteY 
        34, // [0x5A] NOP_5A_Implied 
        75, // [0x5B] SRE_AbsoluteY 
        34, // [0x5C] NOP_5C_AbsoluteX 
        24, // [0x5D] EOR_AbsoluteX 
        33, // [0x5E] LSR_AbsoluteX 
        75, // [0x5F] SRE_AbsoluteX 
        43, // [0x60] RTS_Implied 
        1 , // [0x61] ADC_IndirectX 
        63, // [0x62] JAM_62_Implied 
        68, // [0x63] RRA_IndirectX 
        34, // [0x64] NOP_64_ZeroPage 
        1 , // [0x65] ADC_ZeroPage 
        41, // [0x66] ROR_ZeroPage 
        68, // [0x67] RRA_ZeroPage 
        38, // [0x68] PLA_Implied 
        1 , // [0x69] ADC_Immediate 
        41, // [0x6A] ROR_Accumulator 
        60, // [0x6B] ARR_Immediate 
        28, // [0x6C] JMP_Indirect 
        1 , // [0x6D] ADC_Absolute 
        41, // [0x6E] ROR_Absolute 
        68, // [0x6F] RRA_Absolute 
        13, // [0x70] BVS_Relative 
        1 , // [0x71] ADC_IndirectY 
        63, // [0x72] JAM_72_Implied 
        68, // [0x73] RRA_IndirectY 
        34, // [0x74] NOP_74_ZeroPageX 
        1 , // [0x75] ADC_ZeroPageX 
        41, // [0x76] ROR_ZeroPageX 
        68, // [0x77] RRA_ZeroPageX 
        47, // [0x78] SEI_Implied 
        1 , // [0x79] ADC_AbsoluteY 
        34, // [0x7A] NOP_7A_Implied 
        68, // [0x7B] RRA_AbsoluteY 
        34, // [0x7C] NOP_7C_AbsoluteX 
        1 , // [0x7D] ADC_AbsoluteX 
        41, // [0x7E] ROR_AbsoluteX 
        68, // [0x7F] RRA_AbsoluteX 
        34, // [0x80] NOP_Immediate 
        48, // [0x81] STA_IndirectX 
        34, // [0x82] NOP_82_Immediate 
        69, // [0x83] SAX_IndirectX 
        50, // [0x84] STY_ZeroPage 
        48, // [0x85] STA_ZeroPage 
        49, // [0x86] STX_ZeroPage 
        69, // [0x87] SAX_ZeroPage 
        23, // [0x88] DEY_Implied 
        34, // [0x89] NOP_89_Immediate 
        54, // [0x8A] TXA_Implied 
        59, // [0x8B] ANE_Immediate 
        50, // [0x8C] STY_Absolute 
        48, // [0x8D] STA_Absolute 
        49, // [0x8E] STX_Absolute 
        69, // [0x8F] SAX_Absolute 
        4 , // [0x90] BCC_Relative 
        48, // [0x91] STA_IndirectY 
        63, // [0x92] JAM_92_Implied 
        71, // [0x93] SHA_IndirectY 
        50, // [0x94] STY_ZeroPageX 
        48, // [0x95] STA_ZeroPageX 
        49, // [0x96] STX_ZeroPageY 
        69, // [0x97] SAX_ZeroPageY 
        56, // [0x98] TYA_Implied 
        48, // [0x99] STA_AbsoluteY 
        55, // [0x9A] TXS_Implied 
        76, // [0x9B] TAS_AbsoluteY 
        73, // [0x9C] SHY_AbsoluteX 
        48, // [0x9D] STA_AbsoluteX 
        72, // [0x9E] SHX_AbsoluteY 
        71, // [0x9F] SHA_AbsoluteY 
        32, // [0xA0] LDY_Immediate 
        30, // [0xA1] LDA_IndirectX 
        31, // [0xA2] LDX_Immediate 
        65, // [0xA3] LAX_IndirectX 
        32, // [0xA4] LDY_ZeroPage 
        30, // [0xA5] LDA_ZeroPage 
        31, // [0xA6] LDX_ZeroPage 
        65, // [0xA7] LAX_ZeroPage 
        52, // [0xA8] TAY_Implied 
        30, // [0xA9] LDA_Immediate 
        51, // [0xAA] TAX_Implied 
        66, // [0xAB] LXA_Immediate 
        32, // [0xAC] LDY_Absolute 
        30, // [0xAD] LDA_Absolute 
        31, // [0xAE] LDX_Absolute 
        65, // [0xAF] LAX_Absolute 
        5 , // [0xB0] BCS_Relative 
        30, // [0xB1] LDA_IndirectY 
        63, // [0xB2] JAM_B2_Implied 
        65, // [0xB3] LAX_IndirectY 
        32, // [0xB4] LDY_ZeroPageX 
        30, // [0xB5] LDA_ZeroPageX 
        31, // [0xB6] LDX_ZeroPageY 
        65, // [0xB7] LAX_ZeroPageY 
        17, // [0xB8] CLV_Implied 
        30, // [0xB9] LDA_AbsoluteY 
        53, // [0xBA] TSX_Implied 
        64, // [0xBB] LAS_AbsoluteY 
        32, // [0xBC] LDY_AbsoluteX 
        30, // [0xBD] LDA_AbsoluteX 
        31, // [0xBE] LDX_AbsoluteY 
        65, // [0xBF] LAX_AbsoluteY 
        20, // [0xC0] CPY_Immediate 
        18, // [0xC1] CMP_IndirectX 
        34, // [0xC2] NOP_C2_Immediate 
        61, // [0xC3] DCP_IndirectX 
        20, // [0xC4] CPY_ZeroPage 
        18, // [0xC5] CMP_ZeroPage 
        21, // [0xC6] DEC_ZeroPage 
        61, // [0xC7] DCP_ZeroPage 
        27, // [0xC8] INY_Implied 
        18, // [0xC9] CMP_Immediate 
        22, // [0xCA] DEX_Implied 
        70, // [0xCB] SBX_Immediate 
        20, // [0xCC] CPY_Absolute 
        18, // [0xCD] CMP_Absolute 
        21, // [0xCE] DEC_Absolute 
        61, // [0xCF] DCP_Absolute 
        9 , // [0xD0] BNE_Relative 
        18, // [0xD1] CMP_IndirectY 
        63, // [0xD2] JAM_D2_Implied 
        61, // [0xD3] DCP_IndirectY 
        34, // [0xD4] NOP_D4_ZeroPageX 
        18, // [0xD5] CMP_ZeroPageX 
        21, // [0xD6] DEC_ZeroPageX 
        61, // [0xD7] DCP_ZeroPageX 
        15, // [0xD8] CLD_Implied 
        18, // [0xD9] CMP_AbsoluteY 
        34, // [0xDA] NOP_DA_Implied 
        61, // [0xDB] DCP_AbsoluteY 
        34, // [0xDC] NOP_DC_AbsoluteX 
        18, // [0xDD] CMP_AbsoluteX 
        21, // [0xDE] DEC_AbsoluteX 
        61, // [0xDF] DCP_AbsoluteX 
        19, // [0xE0] CPX_Immediate 
        44, // [0xE1] SBC_IndirectX 
        34, // [0xE2] NOP_E2_Immediate 
        62, // [0xE3] ISC_IndirectX 
        19, // [0xE4] CPX_ZeroPage 
        44, // [0xE5] SBC_ZeroPage 
        25, // [0xE6] INC_ZeroPage 
        62, // [0xE7] ISC_ZeroPage 
        26, // [0xE8] INX_Implied 
        44, // [0xE9] SBC_Immediate 
        34, // [0xEA] NOP_Implied 
        77, // [0xEB] USBC_Immediate 
        19, // [0xEC] CPX_Absolute 
        44, // [0xED] SBC_Absolute 
        25, // [0xEE] INC_Absolute 
        62, // [0xEF] ISC_Absolute 
        6 , // [0xF0] BEQ_Relative 
        44, // [0xF1] SBC_IndirectY 
        63, // [0xF2] JAM_F2_Implied 
        62, // [0xF3] ISC_IndirectY 
        34, // [0xF4] NOP_F4_ZeroPageX 
        44, // [0xF5] SBC_ZeroPageX 
        25, // [0xF6] INC_ZeroPageX 
        62, // [0xF7] ISC_ZeroPageX 
        46, // [0xF8] SED_Implied 
        44, // [0xF9] SBC_AbsoluteY 
        34, // [0xFA] NOP_FA_Implied 
        62, // [0xFB] ISC_AbsoluteY 
        34, // [0xFC] NOP_FC_AbsoluteX 
        44, // [0xFD] SBC_AbsoluteX 
        25, // [0xFE] INC_AbsoluteX 
        62, // [0xFF] ISC_AbsoluteX 
    };
    
    private static readonly string[] MapMnemonicToTextUppercase = new string[78]
    {
        "???", // Unknown mnemonic
        "ADC", //  1 - ADC
        "AND", //  2 - AND
        "ASL", //  3 - ASL
        "BCC", //  4 - BCC
        "BCS", //  5 - BCS
        "BEQ", //  6 - BEQ
        "BIT", //  7 - BIT
        "BMI", //  8 - BMI
        "BNE", //  9 - BNE
        "BPL", // 10 - BPL
        "BRK", // 11 - BRK
        "BVC", // 12 - BVC
        "BVS", // 13 - BVS
        "CLC", // 14 - CLC
        "CLD", // 15 - CLD
        "CLI", // 16 - CLI
        "CLV", // 17 - CLV
        "CMP", // 18 - CMP
        "CPX", // 19 - CPX
        "CPY", // 20 - CPY
        "DEC", // 21 - DEC
        "DEX", // 22 - DEX
        "DEY", // 23 - DEY
        "EOR", // 24 - EOR
        "INC", // 25 - INC
        "INX", // 26 - INX
        "INY", // 27 - INY
        "JMP", // 28 - JMP
        "JSR", // 29 - JSR
        "LDA", // 30 - LDA
        "LDX", // 31 - LDX
        "LDY", // 32 - LDY
        "LSR", // 33 - LSR
        "NOP", // 34 - NOP
        "ORA", // 35 - ORA
        "PHA", // 36 - PHA
        "PHP", // 37 - PHP
        "PLA", // 38 - PLA
        "PLP", // 39 - PLP
        "ROL", // 40 - ROL
        "ROR", // 41 - ROR
        "RTI", // 42 - RTI
        "RTS", // 43 - RTS
        "SBC", // 44 - SBC
        "SEC", // 45 - SEC
        "SED", // 46 - SED
        "SEI", // 47 - SEI
        "STA", // 48 - STA
        "STX", // 49 - STX
        "STY", // 50 - STY
        "TAX", // 51 - TAX
        "TAY", // 52 - TAY
        "TSX", // 53 - TSX
        "TXA", // 54 - TXA
        "TXS", // 55 - TXS
        "TYA", // 56 - TYA
        "ALR", // 57 - ALR
        "ANC", // 58 - ANC
        "ANE", // 59 - ANE
        "ARR", // 60 - ARR
        "DCP", // 61 - DCP
        "ISC", // 62 - ISC
        "JAM", // 63 - JAM
        "LAS", // 64 - LAS
        "LAX", // 65 - LAX
        "LXA", // 66 - LXA
        "RLA", // 67 - RLA
        "RRA", // 68 - RRA
        "SAX", // 69 - SAX
        "SBX", // 70 - SBX
        "SHA", // 71 - SHA
        "SHX", // 72 - SHX
        "SHY", // 73 - SHY
        "SLO", // 74 - SLO
        "SRE", // 75 - SRE
        "TAS", // 76 - TAS
        "USBC", // 77 - USBC
    };
    
    private static readonly string[] MapMnemonicToTextLowercase = new string[78]
    {
        "???", // Unknown mnemonic
        "adc", //  1 - ADC
        "and", //  2 - AND
        "asl", //  3 - ASL
        "bcc", //  4 - BCC
        "bcs", //  5 - BCS
        "beq", //  6 - BEQ
        "bit", //  7 - BIT
        "bmi", //  8 - BMI
        "bne", //  9 - BNE
        "bpl", // 10 - BPL
        "brk", // 11 - BRK
        "bvc", // 12 - BVC
        "bvs", // 13 - BVS
        "clc", // 14 - CLC
        "cld", // 15 - CLD
        "cli", // 16 - CLI
        "clv", // 17 - CLV
        "cmp", // 18 - CMP
        "cpx", // 19 - CPX
        "cpy", // 20 - CPY
        "dec", // 21 - DEC
        "dex", // 22 - DEX
        "dey", // 23 - DEY
        "eor", // 24 - EOR
        "inc", // 25 - INC
        "inx", // 26 - INX
        "iny", // 27 - INY
        "jmp", // 28 - JMP
        "jsr", // 29 - JSR
        "lda", // 30 - LDA
        "ldx", // 31 - LDX
        "ldy", // 32 - LDY
        "lsr", // 33 - LSR
        "nop", // 34 - NOP
        "ora", // 35 - ORA
        "pha", // 36 - PHA
        "php", // 37 - PHP
        "pla", // 38 - PLA
        "plp", // 39 - PLP
        "rol", // 40 - ROL
        "ror", // 41 - ROR
        "rti", // 42 - RTI
        "rts", // 43 - RTS
        "sbc", // 44 - SBC
        "sec", // 45 - SEC
        "sed", // 46 - SED
        "sei", // 47 - SEI
        "sta", // 48 - STA
        "stx", // 49 - STX
        "sty", // 50 - STY
        "tax", // 51 - TAX
        "tay", // 52 - TAY
        "tsx", // 53 - TSX
        "txa", // 54 - TXA
        "txs", // 55 - TXS
        "tya", // 56 - TYA
        "alr", // 57 - ALR
        "anc", // 58 - ANC
        "ane", // 59 - ANE
        "arr", // 60 - ARR
        "dcp", // 61 - DCP
        "isc", // 62 - ISC
        "jam", // 63 - JAM
        "las", // 64 - LAS
        "lax", // 65 - LAX
        "lxa", // 66 - LXA
        "rla", // 67 - RLA
        "rra", // 68 - RRA
        "sax", // 69 - SAX
        "sbx", // 70 - SBX
        "sha", // 71 - SHA
        "shx", // 72 - SHX
        "shy", // 73 - SHY
        "slo", // 74 - SLO
        "sre", // 75 - SRE
        "tas", // 76 - TAS
        "usbc", // 77 - USBC
    };
    
    private static ReadOnlySpan<byte> MapOpCodeToCycles => new byte[256]
    {
        7, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6, 
        2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 
        6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6, 
        2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 
        6, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6, 
        2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 
        6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6, 
        2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 
        2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 
        2, 6, 2, 6, 4, 4, 4, 4, 2, 5, 2, 5, 5, 5, 5, 5, 
        2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 
        2, 5, 2, 5, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4, 
        2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6, 
        2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 
        2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6, 
        2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7, 
    };
    
}
