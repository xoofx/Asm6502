// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by Asm6502.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
#pragma warning disable CS1573
using System.Runtime.CompilerServices;

namespace Asm6502;

/// <summary>
/// Factory for all Mos6510 instructions.
/// </summary>
public static partial class Mos6510InstructionFactory
{
    /// <summary>
    /// Creates the ADC instruction (0x6d) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Add with carry. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ADC(ushort address) => new (Mos6510OpCode.ADC_Absolute, address);
    
    /// <summary>
    /// Creates the ADC instruction (0x7d) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Add with carry. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ADC(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.ADC_AbsoluteX, address);
    
    /// <summary>
    /// Creates the ADC instruction (0x79) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Add with carry. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ADC(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.ADC_AbsoluteY, address);
    
    /// <summary>
    /// Creates the ADC instruction (0x69) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Add with carry. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ADC_Imm(byte immediate) => new (Mos6510OpCode.ADC_Immediate, immediate);
    
    /// <summary>
    /// Creates the ADC instruction (0x61) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>Add with carry. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ADC(Mos6502IndirectX indirect) => new (Mos6510OpCode.ADC_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the ADC instruction (0x71) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>Add with carry. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ADC(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.ADC_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the ADC instruction (0x65) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Add with carry. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ADC(byte zeroPage) => new (Mos6510OpCode.ADC_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the ADC instruction (0x75) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Add with carry. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ADC(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.ADC_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the AND instruction (0x2d) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Logical AND. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction AND(ushort address) => new (Mos6510OpCode.AND_Absolute, address);
    
    /// <summary>
    /// Creates the AND instruction (0x3d) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Logical AND. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction AND(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.AND_AbsoluteX, address);
    
    /// <summary>
    /// Creates the AND instruction (0x39) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Logical AND. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction AND(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.AND_AbsoluteY, address);
    
    /// <summary>
    /// Creates the AND instruction (0x29) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Logical AND. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction AND_Imm(byte immediate) => new (Mos6510OpCode.AND_Immediate, immediate);
    
    /// <summary>
    /// Creates the AND instruction (0x21) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>Logical AND. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction AND(Mos6502IndirectX indirect) => new (Mos6510OpCode.AND_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the AND instruction (0x31) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>Logical AND. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction AND(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.AND_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the AND instruction (0x25) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Logical AND. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction AND(byte zeroPage) => new (Mos6510OpCode.AND_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the AND instruction (0x35) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Logical AND. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction AND(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.AND_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the ASL instruction (0x0e) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Arithmetic shift left. Cycles: 6, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ASL(ushort address) => new (Mos6510OpCode.ASL_Absolute, address);
    
    /// <summary>
    /// Creates the ASL instruction (0x1e) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Arithmetic shift left. Cycles: 7, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ASL(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.ASL_AbsoluteX, address);
    
    /// <summary>
    /// Creates the ASL instruction (0x0a) instruction with addressing mode Accumulator.
    /// </summary>
    /// <remarks>Arithmetic shift left. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ASL(Mos6502RegisterA accumulator = Mos6502RegisterA.A) => new (Mos6510OpCode.ASL_Accumulator);
    
    /// <summary>
    /// Creates the ASL instruction (0x06) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Arithmetic shift left. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ASL(byte zeroPage) => new (Mos6510OpCode.ASL_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the ASL instruction (0x16) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Arithmetic shift left. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ASL(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.ASL_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the BCC instruction (0x90) instruction with addressing mode Relative.
    /// </summary>
    /// <remarks>Branch if carry clear. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BCC(sbyte relativeAddress) => new (Mos6510OpCode.BCC_Relative, relativeAddress);
    
    /// <summary>
    /// Creates the BCS instruction (0xb0) instruction with addressing mode Relative.
    /// </summary>
    /// <remarks>Branch if carry set. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BCS(sbyte relativeAddress) => new (Mos6510OpCode.BCS_Relative, relativeAddress);
    
    /// <summary>
    /// Creates the BEQ instruction (0xf0) instruction with addressing mode Relative.
    /// </summary>
    /// <remarks>Branch if equal. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BEQ(sbyte relativeAddress) => new (Mos6510OpCode.BEQ_Relative, relativeAddress);
    
    /// <summary>
    /// Creates the BIT instruction (0x2c) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Bit test. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BIT(ushort address) => new (Mos6510OpCode.BIT_Absolute, address);
    
    /// <summary>
    /// Creates the BIT instruction (0x24) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Bit test. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BIT(byte zeroPage) => new (Mos6510OpCode.BIT_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the BMI instruction (0x30) instruction with addressing mode Relative.
    /// </summary>
    /// <remarks>Branch if minus. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BMI(sbyte relativeAddress) => new (Mos6510OpCode.BMI_Relative, relativeAddress);
    
    /// <summary>
    /// Creates the BNE instruction (0xd0) instruction with addressing mode Relative.
    /// </summary>
    /// <remarks>Branch if not equal. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BNE(sbyte relativeAddress) => new (Mos6510OpCode.BNE_Relative, relativeAddress);
    
    /// <summary>
    /// Creates the BPL instruction (0x10) instruction with addressing mode Relative.
    /// </summary>
    /// <remarks>Branch if positive. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BPL(sbyte relativeAddress) => new (Mos6510OpCode.BPL_Relative, relativeAddress);
    
    /// <summary>
    /// Creates the BRK instruction (0x00) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Break / Software Interrupt. Cycles: 7, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BRK() => new (Mos6510OpCode.BRK_Implied);
    
    /// <summary>
    /// Creates the BVC instruction (0x50) instruction with addressing mode Relative.
    /// </summary>
    /// <remarks>Branch if overflow clear. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BVC(sbyte relativeAddress) => new (Mos6510OpCode.BVC_Relative, relativeAddress);
    
    /// <summary>
    /// Creates the BVS instruction (0x70) instruction with addressing mode Relative.
    /// </summary>
    /// <remarks>Branch if overflow set. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction BVS(sbyte relativeAddress) => new (Mos6510OpCode.BVS_Relative, relativeAddress);
    
    /// <summary>
    /// Creates the CLC instruction (0x18) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Clear carry. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CLC() => new (Mos6510OpCode.CLC_Implied);
    
    /// <summary>
    /// Creates the CLD instruction (0xd8) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Clear decimal mode. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CLD() => new (Mos6510OpCode.CLD_Implied);
    
    /// <summary>
    /// Creates the CLI instruction (0x58) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Clear interrupt disable. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CLI() => new (Mos6510OpCode.CLI_Implied);
    
    /// <summary>
    /// Creates the CLV instruction (0xb8) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Clear overflow flag. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CLV() => new (Mos6510OpCode.CLV_Implied);
    
    /// <summary>
    /// Creates the CMP instruction (0xcd) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Compare. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CMP(ushort address) => new (Mos6510OpCode.CMP_Absolute, address);
    
    /// <summary>
    /// Creates the CMP instruction (0xdd) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Compare. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CMP(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.CMP_AbsoluteX, address);
    
    /// <summary>
    /// Creates the CMP instruction (0xd9) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Compare. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CMP(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.CMP_AbsoluteY, address);
    
    /// <summary>
    /// Creates the CMP instruction (0xc9) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Compare. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CMP_Imm(byte immediate) => new (Mos6510OpCode.CMP_Immediate, immediate);
    
    /// <summary>
    /// Creates the CMP instruction (0xc1) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>Compare. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CMP(Mos6502IndirectX indirect) => new (Mos6510OpCode.CMP_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the CMP instruction (0xd1) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>Compare. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CMP(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.CMP_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the CMP instruction (0xc5) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Compare. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CMP(byte zeroPage) => new (Mos6510OpCode.CMP_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the CMP instruction (0xd5) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Compare. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CMP(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.CMP_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the CPX instruction (0xec) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Compare X register. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CPX(ushort address) => new (Mos6510OpCode.CPX_Absolute, address);
    
    /// <summary>
    /// Creates the CPX instruction (0xe0) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Compare X register. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CPX_Imm(byte immediate) => new (Mos6510OpCode.CPX_Immediate, immediate);
    
    /// <summary>
    /// Creates the CPX instruction (0xe4) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Compare X register. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CPX(byte zeroPage) => new (Mos6510OpCode.CPX_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the CPY instruction (0xcc) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Compare Y register. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CPY(ushort address) => new (Mos6510OpCode.CPY_Absolute, address);
    
    /// <summary>
    /// Creates the CPY instruction (0xc0) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Compare Y register. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CPY_Imm(byte immediate) => new (Mos6510OpCode.CPY_Immediate, immediate);
    
    /// <summary>
    /// Creates the CPY instruction (0xc4) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Compare Y register. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction CPY(byte zeroPage) => new (Mos6510OpCode.CPY_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the DEC instruction (0xce) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Decrement memory. Cycles: 6, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DEC(ushort address) => new (Mos6510OpCode.DEC_Absolute, address);
    
    /// <summary>
    /// Creates the DEC instruction (0xde) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Decrement memory. Cycles: 7, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DEC(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.DEC_AbsoluteX, address);
    
    /// <summary>
    /// Creates the DEC instruction (0xc6) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Decrement memory. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DEC(byte zeroPage) => new (Mos6510OpCode.DEC_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the DEC instruction (0xd6) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Decrement memory. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DEC(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.DEC_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the DEX instruction (0xca) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Decrement X register. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DEX() => new (Mos6510OpCode.DEX_Implied);
    
    /// <summary>
    /// Creates the DEY instruction (0x88) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Decrement Y register. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DEY() => new (Mos6510OpCode.DEY_Implied);
    
    /// <summary>
    /// Creates the EOR instruction (0x4d) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Logical Exclusive OR (XOR). Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction EOR(ushort address) => new (Mos6510OpCode.EOR_Absolute, address);
    
    /// <summary>
    /// Creates the EOR instruction (0x5d) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Logical Exclusive OR (XOR). Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction EOR(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.EOR_AbsoluteX, address);
    
    /// <summary>
    /// Creates the EOR instruction (0x59) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Logical Exclusive OR (XOR). Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction EOR(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.EOR_AbsoluteY, address);
    
    /// <summary>
    /// Creates the EOR instruction (0x49) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Logical Exclusive OR (XOR). Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction EOR_Imm(byte immediate) => new (Mos6510OpCode.EOR_Immediate, immediate);
    
    /// <summary>
    /// Creates the EOR instruction (0x41) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>Logical Exclusive OR (XOR). Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction EOR(Mos6502IndirectX indirect) => new (Mos6510OpCode.EOR_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the EOR instruction (0x51) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>Logical Exclusive OR (XOR). Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction EOR(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.EOR_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the EOR instruction (0x45) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Logical Exclusive OR (XOR). Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction EOR(byte zeroPage) => new (Mos6510OpCode.EOR_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the EOR instruction (0x55) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Logical Exclusive OR (XOR). Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction EOR(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.EOR_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the INC instruction (0xee) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Increment memory. Cycles: 6, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction INC(ushort address) => new (Mos6510OpCode.INC_Absolute, address);
    
    /// <summary>
    /// Creates the INC instruction (0xfe) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Increment memory. Cycles: 7, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction INC(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.INC_AbsoluteX, address);
    
    /// <summary>
    /// Creates the INC instruction (0xe6) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Increment memory. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction INC(byte zeroPage) => new (Mos6510OpCode.INC_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the INC instruction (0xf6) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Increment memory. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction INC(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.INC_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the INX instruction (0xe8) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Increment X register. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction INX() => new (Mos6510OpCode.INX_Implied);
    
    /// <summary>
    /// Creates the INY instruction (0xc8) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Increment Y register. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction INY() => new (Mos6510OpCode.INY_Implied);
    
    /// <summary>
    /// Creates the JMP instruction (0x4c) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Unconditional Jump. Cycles: 3, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JMP(ushort address) => new (Mos6510OpCode.JMP_Absolute, address);
    
    /// <summary>
    /// Creates the JMP instruction (0x6c) instruction with addressing mode Indirect.
    /// </summary>
    /// <remarks>Unconditional Jump. Cycles: 5, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JMP(Mos6502Indirect indirect) => new (Mos6510OpCode.JMP_Indirect, indirect.Address);
    
    /// <summary>
    /// Creates the JSR instruction (0x20) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Jump to subroutine. Cycles: 6, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JSR(ushort address) => new (Mos6510OpCode.JSR_Absolute, address);
    
    /// <summary>
    /// Creates the LDA instruction (0xad) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Load accumulator. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDA(ushort address) => new (Mos6510OpCode.LDA_Absolute, address);
    
    /// <summary>
    /// Creates the LDA instruction (0xbd) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Load accumulator. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDA(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.LDA_AbsoluteX, address);
    
    /// <summary>
    /// Creates the LDA instruction (0xb9) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Load accumulator. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDA(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.LDA_AbsoluteY, address);
    
    /// <summary>
    /// Creates the LDA instruction (0xa9) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Load accumulator. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDA_Imm(byte immediate) => new (Mos6510OpCode.LDA_Immediate, immediate);
    
    /// <summary>
    /// Creates the LDA instruction (0xa1) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>Load accumulator. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDA(Mos6502IndirectX indirect) => new (Mos6510OpCode.LDA_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the LDA instruction (0xb1) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>Load accumulator. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDA(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.LDA_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the LDA instruction (0xa5) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Load accumulator. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDA(byte zeroPage) => new (Mos6510OpCode.LDA_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the LDA instruction (0xb5) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Load accumulator. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDA(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.LDA_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the LDX instruction (0xae) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Load X register. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDX(ushort address) => new (Mos6510OpCode.LDX_Absolute, address);
    
    /// <summary>
    /// Creates the LDX instruction (0xbe) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Load X register. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDX(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.LDX_AbsoluteY, address);
    
    /// <summary>
    /// Creates the LDX instruction (0xa2) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Load X register. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDX_Imm(byte immediate) => new (Mos6510OpCode.LDX_Immediate, immediate);
    
    /// <summary>
    /// Creates the LDX instruction (0xa6) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Load X register. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDX(byte zeroPage) => new (Mos6510OpCode.LDX_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the LDX instruction (0xb6) instruction with addressing mode ZeroPageY.
    /// </summary>
    /// <remarks>Load X register. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDX(byte zeroPage, Mos6502RegisterY y) => new (Mos6510OpCode.LDX_ZeroPageY, zeroPage);
    
    /// <summary>
    /// Creates the LDY instruction (0xac) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Load Y register. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDY(ushort address) => new (Mos6510OpCode.LDY_Absolute, address);
    
    /// <summary>
    /// Creates the LDY instruction (0xbc) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Load Y register. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDY(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.LDY_AbsoluteX, address);
    
    /// <summary>
    /// Creates the LDY instruction (0xa0) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Load Y register. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDY_Imm(byte immediate) => new (Mos6510OpCode.LDY_Immediate, immediate);
    
    /// <summary>
    /// Creates the LDY instruction (0xa4) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Load Y register. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDY(byte zeroPage) => new (Mos6510OpCode.LDY_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the LDY instruction (0xb4) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Load Y register. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LDY(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.LDY_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the LSR instruction (0x4e) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Logical shift right. Cycles: 6, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LSR(ushort address) => new (Mos6510OpCode.LSR_Absolute, address);
    
    /// <summary>
    /// Creates the LSR instruction (0x5e) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Logical shift right. Cycles: 7, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LSR(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.LSR_AbsoluteX, address);
    
    /// <summary>
    /// Creates the LSR instruction (0x4a) instruction with addressing mode Accumulator.
    /// </summary>
    /// <remarks>Logical shift right. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LSR(Mos6502RegisterA accumulator = Mos6502RegisterA.A) => new (Mos6510OpCode.LSR_Accumulator);
    
    /// <summary>
    /// Creates the LSR instruction (0x46) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Logical shift right. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LSR(byte zeroPage) => new (Mos6510OpCode.LSR_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the LSR instruction (0x56) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Logical shift right. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LSR(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.LSR_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the NOP instruction (0xea) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP() => new (Mos6510OpCode.NOP_Implied);
    
    /// <summary>
    /// Creates the ORA instruction (0x0d) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Logical Inclusive OR. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ORA(ushort address) => new (Mos6510OpCode.ORA_Absolute, address);
    
    /// <summary>
    /// Creates the ORA instruction (0x1d) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Logical Inclusive OR. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ORA(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.ORA_AbsoluteX, address);
    
    /// <summary>
    /// Creates the ORA instruction (0x19) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Logical Inclusive OR. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ORA(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.ORA_AbsoluteY, address);
    
    /// <summary>
    /// Creates the ORA instruction (0x09) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Logical Inclusive OR. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ORA_Imm(byte immediate) => new (Mos6510OpCode.ORA_Immediate, immediate);
    
    /// <summary>
    /// Creates the ORA instruction (0x01) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>Logical Inclusive OR. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ORA(Mos6502IndirectX indirect) => new (Mos6510OpCode.ORA_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the ORA instruction (0x11) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>Logical Inclusive OR. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ORA(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.ORA_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the ORA instruction (0x05) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Logical Inclusive OR. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ORA(byte zeroPage) => new (Mos6510OpCode.ORA_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the ORA instruction (0x15) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Logical Inclusive OR. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ORA(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.ORA_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the PHA instruction (0x48) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Push accumulator. Cycles: 3, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction PHA() => new (Mos6510OpCode.PHA_Implied);
    
    /// <summary>
    /// Creates the PHP instruction (0x08) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Push processor status. Cycles: 3, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction PHP() => new (Mos6510OpCode.PHP_Implied);
    
    /// <summary>
    /// Creates the PLA instruction (0x68) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Pull accumulator. Cycles: 4, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction PLA() => new (Mos6510OpCode.PLA_Implied);
    
    /// <summary>
    /// Creates the PLP instruction (0x28) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Pull processor status. Cycles: 4, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction PLP() => new (Mos6510OpCode.PLP_Implied);
    
    /// <summary>
    /// Creates the ROL instruction (0x2e) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Rotate left. Cycles: 6, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ROL(ushort address) => new (Mos6510OpCode.ROL_Absolute, address);
    
    /// <summary>
    /// Creates the ROL instruction (0x3e) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Rotate left. Cycles: 7, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ROL(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.ROL_AbsoluteX, address);
    
    /// <summary>
    /// Creates the ROL instruction (0x2a) instruction with addressing mode Accumulator.
    /// </summary>
    /// <remarks>Rotate left. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ROL(Mos6502RegisterA accumulator = Mos6502RegisterA.A) => new (Mos6510OpCode.ROL_Accumulator);
    
    /// <summary>
    /// Creates the ROL instruction (0x26) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Rotate left. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ROL(byte zeroPage) => new (Mos6510OpCode.ROL_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the ROL instruction (0x36) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Rotate left. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ROL(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.ROL_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the ROR instruction (0x6e) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Rotate right. Cycles: 6, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ROR(ushort address) => new (Mos6510OpCode.ROR_Absolute, address);
    
    /// <summary>
    /// Creates the ROR instruction (0x7e) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Rotate right. Cycles: 7, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ROR(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.ROR_AbsoluteX, address);
    
    /// <summary>
    /// Creates the ROR instruction (0x6a) instruction with addressing mode Accumulator.
    /// </summary>
    /// <remarks>Rotate right. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ROR(Mos6502RegisterA accumulator = Mos6502RegisterA.A) => new (Mos6510OpCode.ROR_Accumulator);
    
    /// <summary>
    /// Creates the ROR instruction (0x66) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Rotate right. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ROR(byte zeroPage) => new (Mos6510OpCode.ROR_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the ROR instruction (0x76) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Rotate right. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ROR(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.ROR_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the RTI instruction (0x40) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Return from interrupt. Cycles: 6, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RTI() => new (Mos6510OpCode.RTI_Implied);
    
    /// <summary>
    /// Creates the RTS instruction (0x60) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Return from subroutine. Cycles: 6, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RTS() => new (Mos6510OpCode.RTS_Implied);
    
    /// <summary>
    /// Creates the SBC instruction (0xed) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Subtract with carry. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SBC(ushort address) => new (Mos6510OpCode.SBC_Absolute, address);
    
    /// <summary>
    /// Creates the SBC instruction (0xfd) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Subtract with carry. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SBC(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.SBC_AbsoluteX, address);
    
    /// <summary>
    /// Creates the SBC instruction (0xf9) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Subtract with carry. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SBC(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.SBC_AbsoluteY, address);
    
    /// <summary>
    /// Creates the SBC instruction (0xe9) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Subtract with carry. Cycles: 2, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SBC_Imm(byte immediate) => new (Mos6510OpCode.SBC_Immediate, immediate);
    
    /// <summary>
    /// Creates the SBC instruction (0xe1) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>Subtract with carry. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SBC(Mos6502IndirectX indirect) => new (Mos6510OpCode.SBC_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the SBC instruction (0xf1) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>Subtract with carry. Cycles: 5, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SBC(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.SBC_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the SBC instruction (0xe5) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Subtract with carry. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SBC(byte zeroPage) => new (Mos6510OpCode.SBC_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the SBC instruction (0xf5) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Subtract with carry. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SBC(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.SBC_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the SEC instruction (0x38) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Set carry. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SEC() => new (Mos6510OpCode.SEC_Implied);
    
    /// <summary>
    /// Creates the SED instruction (0xf8) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Set decimal flag. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SED() => new (Mos6510OpCode.SED_Implied);
    
    /// <summary>
    /// Creates the SEI instruction (0x78) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Set interrupt disable. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SEI() => new (Mos6510OpCode.SEI_Implied);
    
    /// <summary>
    /// Creates the STA instruction (0x8d) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Store accumulator. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STA(ushort address) => new (Mos6510OpCode.STA_Absolute, address);
    
    /// <summary>
    /// Creates the STA instruction (0x9d) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Store accumulator. Cycles: 5, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STA(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.STA_AbsoluteX, address);
    
    /// <summary>
    /// Creates the STA instruction (0x99) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Store accumulator. Cycles: 5, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STA(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.STA_AbsoluteY, address);
    
    /// <summary>
    /// Creates the STA instruction (0x81) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>Store accumulator. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STA(Mos6502IndirectX indirect) => new (Mos6510OpCode.STA_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the STA instruction (0x91) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>Store accumulator. Cycles: 6, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STA(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.STA_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the STA instruction (0x85) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Store accumulator. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STA(byte zeroPage) => new (Mos6510OpCode.STA_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the STA instruction (0x95) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Store accumulator. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STA(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.STA_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the STX instruction (0x8e) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Store X register. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STX(ushort address) => new (Mos6510OpCode.STX_Absolute, address);
    
    /// <summary>
    /// Creates the STX instruction (0x86) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Store X register. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STX(byte zeroPage) => new (Mos6510OpCode.STX_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the STX instruction (0x96) instruction with addressing mode ZeroPageY.
    /// </summary>
    /// <remarks>Store X register. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STX(byte zeroPage, Mos6502RegisterY y) => new (Mos6510OpCode.STX_ZeroPageY, zeroPage);
    
    /// <summary>
    /// Creates the STY instruction (0x8c) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Store Y register. Cycles: 4, Size: 3 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STY(ushort address) => new (Mos6510OpCode.STY_Absolute, address);
    
    /// <summary>
    /// Creates the STY instruction (0x84) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Store Y register. Cycles: 3, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STY(byte zeroPage) => new (Mos6510OpCode.STY_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the STY instruction (0x94) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>Store Y register. Cycles: 4, Size: 2 bytes.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction STY(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.STY_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the TAX instruction (0xaa) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Transfer acc to X. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction TAX() => new (Mos6510OpCode.TAX_Implied);
    
    /// <summary>
    /// Creates the TAY instruction (0xa8) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Transfer acc to Y. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction TAY() => new (Mos6510OpCode.TAY_Implied);
    
    /// <summary>
    /// Creates the TSX instruction (0xba) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Transfer stack pointer to X. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction TSX() => new (Mos6510OpCode.TSX_Implied);
    
    /// <summary>
    /// Creates the TXA instruction (0x8a) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Transfer X to acc. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction TXA() => new (Mos6510OpCode.TXA_Implied);
    
    /// <summary>
    /// Creates the TXS instruction (0x9a) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Transfer X to SP. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction TXS() => new (Mos6510OpCode.TXS_Implied);
    
    /// <summary>
    /// Creates the TYA instruction (0x98) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Transfer Y to acc. Cycles: 2, Size: 1 byte.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction TYA() => new (Mos6510OpCode.TYA_Implied);
    
    /// <summary>
    /// Creates the ALR instruction (0x4b) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>AND then LSR. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ALR_Imm(byte immediate) => new (Mos6510OpCode.ALR_Immediate, immediate);
    
    /// <summary>
    /// Creates the ANC instruction (0x0b) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>AND then set carry. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ANC_Imm(byte immediate) => new (Mos6510OpCode.ANC_Immediate, immediate);
    
    /// <summary>
    /// Creates the ANC instruction (0x2b) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>AND then set carry. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ANC_2B_Imm(byte immediate) => new (Mos6510OpCode.ANC_2B_Immediate, immediate);
    
    /// <summary>
    /// Creates the ANE instruction (0x8b) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Undocumented: AND with X then AND operand. Cycles: 2, Size: 2 bytes. This is an undocumented and unstable instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Obsolete("This instruction is unstable and may not behave as expected.", false)]
    public static Mos6510Instruction ANE_Imm(byte immediate) => new (Mos6510OpCode.ANE_Immediate, immediate);
    
    /// <summary>
    /// Creates the ARR instruction (0x6b) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>AND then ROR. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ARR_Imm(byte immediate) => new (Mos6510OpCode.ARR_Immediate, immediate);
    
    /// <summary>
    /// Creates the DCP instruction (0xcf) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>DEC then CMP. Cycles: 6, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DCP(ushort address) => new (Mos6510OpCode.DCP_Absolute, address);
    
    /// <summary>
    /// Creates the DCP instruction (0xdf) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>DEC then CMP. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DCP(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.DCP_AbsoluteX, address);
    
    /// <summary>
    /// Creates the DCP instruction (0xdb) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>DEC then CMP. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DCP(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.DCP_AbsoluteY, address);
    
    /// <summary>
    /// Creates the DCP instruction (0xc3) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>DEC then CMP. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DCP(Mos6502IndirectX indirect) => new (Mos6510OpCode.DCP_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the DCP instruction (0xd3) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>DEC then CMP. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DCP(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.DCP_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the DCP instruction (0xc7) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>DEC then CMP. Cycles: 5, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DCP(byte zeroPage) => new (Mos6510OpCode.DCP_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the DCP instruction (0xd7) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>DEC then CMP. Cycles: 6, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction DCP(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.DCP_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the ISC instruction (0xef) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>INC then SBC. Cycles: 6, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ISC(ushort address) => new (Mos6510OpCode.ISC_Absolute, address);
    
    /// <summary>
    /// Creates the ISC instruction (0xff) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>INC then SBC. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ISC(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.ISC_AbsoluteX, address);
    
    /// <summary>
    /// Creates the ISC instruction (0xfb) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>INC then SBC. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ISC(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.ISC_AbsoluteY, address);
    
    /// <summary>
    /// Creates the ISC instruction (0xe3) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>INC then SBC. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ISC(Mos6502IndirectX indirect) => new (Mos6510OpCode.ISC_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the ISC instruction (0xf3) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>INC then SBC. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ISC(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.ISC_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the ISC instruction (0xe7) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>INC then SBC. Cycles: 5, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ISC(byte zeroPage) => new (Mos6510OpCode.ISC_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the ISC instruction (0xf7) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>INC then SBC. Cycles: 6, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction ISC(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.ISC_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the JAM instruction (0x02) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM() => new (Mos6510OpCode.JAM_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0x12) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_12() => new (Mos6510OpCode.JAM_12_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0x22) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_22() => new (Mos6510OpCode.JAM_22_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0x32) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_32() => new (Mos6510OpCode.JAM_32_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0x42) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_42() => new (Mos6510OpCode.JAM_42_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0x52) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_52() => new (Mos6510OpCode.JAM_52_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0x62) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_62() => new (Mos6510OpCode.JAM_62_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0x72) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_72() => new (Mos6510OpCode.JAM_72_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0x92) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_92() => new (Mos6510OpCode.JAM_92_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0xb2) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_B2() => new (Mos6510OpCode.JAM_B2_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0xd2) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_D2() => new (Mos6510OpCode.JAM_D2_Implied);
    
    /// <summary>
    /// Creates the JAM instruction (0xf2) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>Jam the CPU (halt). Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction JAM_F2() => new (Mos6510OpCode.JAM_F2_Implied);
    
    /// <summary>
    /// Creates the LAS instruction (0xbb) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Load accumulator and transfer SP to X. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LAS(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.LAS_AbsoluteY, address);
    
    /// <summary>
    /// Creates the LAX instruction (0xaf) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>LDA then LDX. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LAX(ushort address) => new (Mos6510OpCode.LAX_Absolute, address);
    
    /// <summary>
    /// Creates the LAX instruction (0xbf) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>LDA then LDX. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LAX(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.LAX_AbsoluteY, address);
    
    /// <summary>
    /// Creates the LAX instruction (0xa3) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>LDA then LDX. Cycles: 6, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LAX(Mos6502IndirectX indirect) => new (Mos6510OpCode.LAX_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the LAX instruction (0xb3) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>LDA then LDX. Cycles: 5, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LAX(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.LAX_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the LAX instruction (0xa7) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>LDA then LDX. Cycles: 3, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LAX(byte zeroPage) => new (Mos6510OpCode.LAX_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the LAX instruction (0xb7) instruction with addressing mode ZeroPageY.
    /// </summary>
    /// <remarks>LDA then LDX. Cycles: 4, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction LAX(byte zeroPage, Mos6502RegisterY y) => new (Mos6510OpCode.LAX_ZeroPageY, zeroPage);
    
    /// <summary>
    /// Creates the LXA instruction (0xab) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>LDA then LDX. Cycles: 2, Size: 2 bytes. This is an undocumented and unstable instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Obsolete("This instruction is unstable and may not behave as expected.", false)]
    public static Mos6510Instruction LXA_Imm(byte immediate) => new (Mos6510OpCode.LXA_Immediate, immediate);
    
    /// <summary>
    /// Creates the NOP instruction (0x0c) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP(ushort address) => new (Mos6510OpCode.NOP_Absolute, address);
    
    /// <summary>
    /// Creates the NOP instruction (0x1c) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_AbsoluteX, address);
    
    /// <summary>
    /// Creates the NOP instruction (0x3c) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_3C(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_3C_AbsoluteX, address);
    
    /// <summary>
    /// Creates the NOP instruction (0x5c) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_5C(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_5C_AbsoluteX, address);
    
    /// <summary>
    /// Creates the NOP instruction (0x7c) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_7C(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_7C_AbsoluteX, address);
    
    /// <summary>
    /// Creates the NOP instruction (0xdc) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_DC(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_DC_AbsoluteX, address);
    
    /// <summary>
    /// Creates the NOP instruction (0xfc) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_FC(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_FC_AbsoluteX, address);
    
    /// <summary>
    /// Creates the NOP instruction (0x80) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_Imm(byte immediate) => new (Mos6510OpCode.NOP_Immediate, immediate);
    
    /// <summary>
    /// Creates the NOP instruction (0x82) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_82_Imm(byte immediate) => new (Mos6510OpCode.NOP_82_Immediate, immediate);
    
    /// <summary>
    /// Creates the NOP instruction (0x89) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_89_Imm(byte immediate) => new (Mos6510OpCode.NOP_89_Immediate, immediate);
    
    /// <summary>
    /// Creates the NOP instruction (0xc2) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_C2_Imm(byte immediate) => new (Mos6510OpCode.NOP_C2_Immediate, immediate);
    
    /// <summary>
    /// Creates the NOP instruction (0xe2) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_E2_Imm(byte immediate) => new (Mos6510OpCode.NOP_E2_Immediate, immediate);
    
    /// <summary>
    /// Creates the NOP instruction (0x1a) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_1A() => new (Mos6510OpCode.NOP_1A_Implied);
    
    /// <summary>
    /// Creates the NOP instruction (0x3a) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_3A() => new (Mos6510OpCode.NOP_3A_Implied);
    
    /// <summary>
    /// Creates the NOP instruction (0x5a) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_5A() => new (Mos6510OpCode.NOP_5A_Implied);
    
    /// <summary>
    /// Creates the NOP instruction (0x7a) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_7A() => new (Mos6510OpCode.NOP_7A_Implied);
    
    /// <summary>
    /// Creates the NOP instruction (0xda) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_DA() => new (Mos6510OpCode.NOP_DA_Implied);
    
    /// <summary>
    /// Creates the NOP instruction (0xfa) instruction with addressing mode Implied.
    /// </summary>
    /// <remarks>No operation. Cycles: 2, Size: 1 byte. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_FA() => new (Mos6510OpCode.NOP_FA_Implied);
    
    /// <summary>
    /// Creates the NOP instruction (0x04) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>No operation. Cycles: 3, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP(byte zeroPage) => new (Mos6510OpCode.NOP_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the NOP instruction (0x44) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>No operation. Cycles: 3, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_44(byte zeroPage) => new (Mos6510OpCode.NOP_44_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the NOP instruction (0x64) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>No operation. Cycles: 3, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_64(byte zeroPage) => new (Mos6510OpCode.NOP_64_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the NOP instruction (0x14) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the NOP instruction (0x34) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_34(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_34_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the NOP instruction (0x54) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_54(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_54_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the NOP instruction (0x74) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_74(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_74_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the NOP instruction (0xd4) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_D4(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_D4_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the NOP instruction (0xf4) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>No operation. Cycles: 4, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction NOP_F4(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.NOP_F4_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the RLA instruction (0x2f) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>ROL then AND. Cycles: 6, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RLA(ushort address) => new (Mos6510OpCode.RLA_Absolute, address);
    
    /// <summary>
    /// Creates the RLA instruction (0x3f) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>ROL then AND. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RLA(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.RLA_AbsoluteX, address);
    
    /// <summary>
    /// Creates the RLA instruction (0x3b) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>ROL then AND. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RLA(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.RLA_AbsoluteY, address);
    
    /// <summary>
    /// Creates the RLA instruction (0x23) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>ROL then AND. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RLA(Mos6502IndirectX indirect) => new (Mos6510OpCode.RLA_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the RLA instruction (0x33) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>ROL then AND. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RLA(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.RLA_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the RLA instruction (0x27) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>ROL then AND. Cycles: 5, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RLA(byte zeroPage) => new (Mos6510OpCode.RLA_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the RLA instruction (0x37) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>ROL then AND. Cycles: 6, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RLA(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.RLA_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the RRA instruction (0x6f) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>ROR then ADC. Cycles: 6, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RRA(ushort address) => new (Mos6510OpCode.RRA_Absolute, address);
    
    /// <summary>
    /// Creates the RRA instruction (0x7f) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>ROR then ADC. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RRA(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.RRA_AbsoluteX, address);
    
    /// <summary>
    /// Creates the RRA instruction (0x7b) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>ROR then ADC. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RRA(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.RRA_AbsoluteY, address);
    
    /// <summary>
    /// Creates the RRA instruction (0x63) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>ROR then ADC. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RRA(Mos6502IndirectX indirect) => new (Mos6510OpCode.RRA_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the RRA instruction (0x73) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>ROR then ADC. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RRA(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.RRA_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the RRA instruction (0x67) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>ROR then ADC. Cycles: 5, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RRA(byte zeroPage) => new (Mos6510OpCode.RRA_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the RRA instruction (0x77) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>ROR then ADC. Cycles: 6, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction RRA(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.RRA_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the SAX instruction (0x8f) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>Store accumulator AND X. Cycles: 4, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SAX(ushort address) => new (Mos6510OpCode.SAX_Absolute, address);
    
    /// <summary>
    /// Creates the SAX instruction (0x83) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>Store accumulator AND X. Cycles: 6, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SAX(Mos6502IndirectX indirect) => new (Mos6510OpCode.SAX_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the SAX instruction (0x87) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>Store accumulator AND X. Cycles: 3, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SAX(byte zeroPage) => new (Mos6510OpCode.SAX_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the SAX instruction (0x97) instruction with addressing mode ZeroPageY.
    /// </summary>
    /// <remarks>Store accumulator AND X. Cycles: 4, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SAX(byte zeroPage, Mos6502RegisterY y) => new (Mos6510OpCode.SAX_ZeroPageY, zeroPage);
    
    /// <summary>
    /// Creates the SBX instruction (0xcb) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>Compute (A AND X) then subtract with carry. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SBX_Imm(byte immediate) => new (Mos6510OpCode.SBX_Immediate, immediate);
    
    /// <summary>
    /// Creates the SHA instruction (0x9f) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Store A AND X AND (high address + 1). Cycles: 5, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SHA(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.SHA_AbsoluteY, address);
    
    /// <summary>
    /// Creates the SHA instruction (0x93) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>Store A AND X AND (high address + 1). Cycles: 6, Size: 2 bytes. This is an undocumented and unstable instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Obsolete("This instruction is unstable and may not behave as expected.", false)]
    public static Mos6510Instruction SHA(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.SHA_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the SHX instruction (0x9e) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Store A AND X AND (high address + 1). Cycles: 5, Size: 3 bytes. This is an undocumented and unstable instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Obsolete("This instruction is unstable and may not behave as expected.", false)]
    public static Mos6510Instruction SHX(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.SHX_AbsoluteY, address);
    
    /// <summary>
    /// Creates the SHY instruction (0x9c) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>Store Y AND (high address + 1). Cycles: 5, Size: 3 bytes. This is an undocumented and unstable instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Obsolete("This instruction is unstable and may not behave as expected.", false)]
    public static Mos6510Instruction SHY(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.SHY_AbsoluteX, address);
    
    /// <summary>
    /// Creates the SLO instruction (0x0f) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>ASL then ORA. Cycles: 6, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SLO(ushort address) => new (Mos6510OpCode.SLO_Absolute, address);
    
    /// <summary>
    /// Creates the SLO instruction (0x1f) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>ASL then ORA. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SLO(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.SLO_AbsoluteX, address);
    
    /// <summary>
    /// Creates the SLO instruction (0x1b) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>ASL then ORA. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SLO(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.SLO_AbsoluteY, address);
    
    /// <summary>
    /// Creates the SLO instruction (0x03) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>ASL then ORA. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SLO(Mos6502IndirectX indirect) => new (Mos6510OpCode.SLO_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the SLO instruction (0x13) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>ASL then ORA. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SLO(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.SLO_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the SLO instruction (0x07) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>ASL then ORA. Cycles: 5, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SLO(byte zeroPage) => new (Mos6510OpCode.SLO_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the SLO instruction (0x17) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>ASL then ORA. Cycles: 6, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SLO(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.SLO_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the SRE instruction (0x4f) instruction with addressing mode Absolute.
    /// </summary>
    /// <remarks>LSR then EOR. Cycles: 6, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SRE(ushort address) => new (Mos6510OpCode.SRE_Absolute, address);
    
    /// <summary>
    /// Creates the SRE instruction (0x5f) instruction with addressing mode AbsoluteX.
    /// </summary>
    /// <remarks>LSR then EOR. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SRE(ushort address, Mos6502RegisterX x) => new (Mos6510OpCode.SRE_AbsoluteX, address);
    
    /// <summary>
    /// Creates the SRE instruction (0x5b) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>LSR then EOR. Cycles: 7, Size: 3 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SRE(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.SRE_AbsoluteY, address);
    
    /// <summary>
    /// Creates the SRE instruction (0x43) instruction with addressing mode IndirectX.
    /// </summary>
    /// <remarks>LSR then EOR. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SRE(Mos6502IndirectX indirect) => new (Mos6510OpCode.SRE_IndirectX, indirect.Address);
    
    /// <summary>
    /// Creates the SRE instruction (0x53) instruction with addressing mode IndirectY.
    /// </summary>
    /// <remarks>LSR then EOR. Cycles: 8, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SRE(Mos6502IndirectY indirect, Mos6502RegisterY y) => new (Mos6510OpCode.SRE_IndirectY, indirect.Address);
    
    /// <summary>
    /// Creates the SRE instruction (0x47) instruction with addressing mode ZeroPage.
    /// </summary>
    /// <remarks>LSR then EOR. Cycles: 5, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SRE(byte zeroPage) => new (Mos6510OpCode.SRE_ZeroPage, zeroPage);
    
    /// <summary>
    /// Creates the SRE instruction (0x57) instruction with addressing mode ZeroPageX.
    /// </summary>
    /// <remarks>LSR then EOR. Cycles: 6, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction SRE(byte zeroPage, Mos6502RegisterX x) => new (Mos6510OpCode.SRE_ZeroPageX, zeroPage);
    
    /// <summary>
    /// Creates the TAS instruction (0x9b) instruction with addressing mode AbsoluteY.
    /// </summary>
    /// <remarks>Transfer A AND X to SP, store A AND X AND (high address + 1). Cycles: 5, Size: 3 bytes. This is an undocumented and unstable instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Obsolete("This instruction is unstable and may not behave as expected.", false)]
    public static Mos6510Instruction TAS(ushort address, Mos6502RegisterY y) => new (Mos6510OpCode.TAS_AbsoluteY, address);
    
    /// <summary>
    /// Creates the USBC instruction (0xeb) instruction with addressing mode Immediate.
    /// </summary>
    /// <remarks>SBC with NOP behavior. Cycles: 2, Size: 2 bytes. This is an undocumented instruction.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Mos6510Instruction USBC_Imm(byte immediate) => new (Mos6510OpCode.USBC_Immediate, immediate);
    
}
