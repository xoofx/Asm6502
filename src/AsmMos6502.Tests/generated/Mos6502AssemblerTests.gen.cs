// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmMos6502.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
using System.Runtime.CompilerServices;
using static AsmMos6502.Mos6502Factory;

namespace AsmMos6502.Tests;

[TestClass]
public partial class Mos6502AssemblerTests : VerifyBase
{
    [TestMethod]
    public async Task ADC_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .ADC(0x1234)
            .ADC(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ADC_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .ADC(0x1234, X)
            .ADC(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ADC_AbsoluteY()
    {
        using var asm = new Mos6502Assembler()
            .ADC(0x1234, Y)
            .ADC(0xFF03, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ADC_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .ADC_Imm(0x01)
            .ADC_Imm(0x42)
            .ADC_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ADC_IndirectX()
    {
        using var asm = new Mos6502Assembler()
            .ADC(_[0x05, X])
            .ADC(_[0x20, X])
            .ADC(_[0xFF, X])
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ADC_IndirectY()
    {
        using var asm = new Mos6502Assembler()
            .ADC(_[0x06], Y)
            .ADC(_[0x30], Y)
            .ADC(_[0xFE], Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ADC_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .ADC(0x03)
            .ADC(0x20)
            .ADC(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ADC_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .ADC(0x02, X)
            .ADC(0x30, X)
            .ADC(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task AND_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .AND(0x1234)
            .AND(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task AND_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .AND(0x1234, X)
            .AND(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task AND_AbsoluteY()
    {
        using var asm = new Mos6502Assembler()
            .AND(0x1234, Y)
            .AND(0xFF03, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task AND_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .AND_Imm(0x01)
            .AND_Imm(0x42)
            .AND_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task AND_IndirectX()
    {
        using var asm = new Mos6502Assembler()
            .AND(_[0x05, X])
            .AND(_[0x20, X])
            .AND(_[0xFF, X])
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task AND_IndirectY()
    {
        using var asm = new Mos6502Assembler()
            .AND(_[0x06], Y)
            .AND(_[0x30], Y)
            .AND(_[0xFE], Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task AND_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .AND(0x03)
            .AND(0x20)
            .AND(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task AND_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .AND(0x02, X)
            .AND(0x30, X)
            .AND(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ASL_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .ASL(0x1234)
            .ASL(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ASL_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .ASL(0x1234, X)
            .ASL(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ASL_Accumulator()
    {
        using var asm = new Mos6502Assembler()
            .ASL(A)
            .ASL()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ASL_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .ASL(0x03)
            .ASL(0x20)
            .ASL(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ASL_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .ASL(0x02, X)
            .ASL(0x30, X)
            .ASL(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BCC_Relative()
    {
        using var asm = new Mos6502Assembler()
            .BCC(0x10)
            .BCC(-3)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BCS_Relative()
    {
        using var asm = new Mos6502Assembler()
            .BCS(0x10)
            .BCS(-3)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BEQ_Relative()
    {
        using var asm = new Mos6502Assembler()
            .BEQ(0x10)
            .BEQ(-3)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BIT_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .BIT(0x1234)
            .BIT(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BIT_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .BIT(0x03)
            .BIT(0x20)
            .BIT(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BMI_Relative()
    {
        using var asm = new Mos6502Assembler()
            .BMI(0x10)
            .BMI(-3)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BNE_Relative()
    {
        using var asm = new Mos6502Assembler()
            .BNE(0x10)
            .BNE(-3)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BPL_Relative()
    {
        using var asm = new Mos6502Assembler()
            .BPL(0x10)
            .BPL(-3)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BRK_Implied()
    {
        using var asm = new Mos6502Assembler()
            .BRK()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BVC_Relative()
    {
        using var asm = new Mos6502Assembler()
            .BVC(0x10)
            .BVC(-3)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task BVS_Relative()
    {
        using var asm = new Mos6502Assembler()
            .BVS(0x10)
            .BVS(-3)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CLC_Implied()
    {
        using var asm = new Mos6502Assembler()
            .CLC()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CLD_Implied()
    {
        using var asm = new Mos6502Assembler()
            .CLD()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CLI_Implied()
    {
        using var asm = new Mos6502Assembler()
            .CLI()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CLV_Implied()
    {
        using var asm = new Mos6502Assembler()
            .CLV()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CMP_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .CMP(0x1234)
            .CMP(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CMP_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .CMP(0x1234, X)
            .CMP(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CMP_AbsoluteY()
    {
        using var asm = new Mos6502Assembler()
            .CMP(0x1234, Y)
            .CMP(0xFF03, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CMP_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .CMP_Imm(0x01)
            .CMP_Imm(0x42)
            .CMP_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CMP_IndirectX()
    {
        using var asm = new Mos6502Assembler()
            .CMP(_[0x05, X])
            .CMP(_[0x20, X])
            .CMP(_[0xFF, X])
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CMP_IndirectY()
    {
        using var asm = new Mos6502Assembler()
            .CMP(_[0x06], Y)
            .CMP(_[0x30], Y)
            .CMP(_[0xFE], Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CMP_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .CMP(0x03)
            .CMP(0x20)
            .CMP(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CMP_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .CMP(0x02, X)
            .CMP(0x30, X)
            .CMP(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CPX_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .CPX(0x1234)
            .CPX(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CPX_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .CPX_Imm(0x01)
            .CPX_Imm(0x42)
            .CPX_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CPX_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .CPX(0x03)
            .CPX(0x20)
            .CPX(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CPY_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .CPY(0x1234)
            .CPY(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CPY_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .CPY_Imm(0x01)
            .CPY_Imm(0x42)
            .CPY_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task CPY_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .CPY(0x03)
            .CPY(0x20)
            .CPY(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task DEC_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .DEC(0x1234)
            .DEC(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task DEC_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .DEC(0x1234, X)
            .DEC(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task DEC_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .DEC(0x03)
            .DEC(0x20)
            .DEC(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task DEC_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .DEC(0x02, X)
            .DEC(0x30, X)
            .DEC(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task DEX_Implied()
    {
        using var asm = new Mos6502Assembler()
            .DEX()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task DEY_Implied()
    {
        using var asm = new Mos6502Assembler()
            .DEY()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task EOR_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .EOR(0x1234)
            .EOR(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task EOR_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .EOR(0x1234, X)
            .EOR(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task EOR_AbsoluteY()
    {
        using var asm = new Mos6502Assembler()
            .EOR(0x1234, Y)
            .EOR(0xFF03, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task EOR_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .EOR_Imm(0x01)
            .EOR_Imm(0x42)
            .EOR_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task EOR_IndirectX()
    {
        using var asm = new Mos6502Assembler()
            .EOR(_[0x05, X])
            .EOR(_[0x20, X])
            .EOR(_[0xFF, X])
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task EOR_IndirectY()
    {
        using var asm = new Mos6502Assembler()
            .EOR(_[0x06], Y)
            .EOR(_[0x30], Y)
            .EOR(_[0xFE], Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task EOR_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .EOR(0x03)
            .EOR(0x20)
            .EOR(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task EOR_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .EOR(0x02, X)
            .EOR(0x30, X)
            .EOR(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task INC_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .INC(0x1234)
            .INC(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task INC_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .INC(0x1234, X)
            .INC(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task INC_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .INC(0x03)
            .INC(0x20)
            .INC(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task INC_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .INC(0x02, X)
            .INC(0x30, X)
            .INC(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task INX_Implied()
    {
        using var asm = new Mos6502Assembler()
            .INX()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task INY_Implied()
    {
        using var asm = new Mos6502Assembler()
            .INY()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task JMP_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .JMP(0x1234)
            .JMP(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task JMP_Indirect()
    {
        using var asm = new Mos6502Assembler()
            .JMP(_[0x1234])
            .JMP(_[0xFF04])
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task JSR_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .JSR(0x1234)
            .JSR(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDA_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .LDA(0x1234)
            .LDA(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDA_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .LDA(0x1234, X)
            .LDA(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDA_AbsoluteY()
    {
        using var asm = new Mos6502Assembler()
            .LDA(0x1234, Y)
            .LDA(0xFF03, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDA_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .LDA_Imm(0x01)
            .LDA_Imm(0x42)
            .LDA_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDA_IndirectX()
    {
        using var asm = new Mos6502Assembler()
            .LDA(_[0x05, X])
            .LDA(_[0x20, X])
            .LDA(_[0xFF, X])
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDA_IndirectY()
    {
        using var asm = new Mos6502Assembler()
            .LDA(_[0x06], Y)
            .LDA(_[0x30], Y)
            .LDA(_[0xFE], Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDA_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .LDA(0x03)
            .LDA(0x20)
            .LDA(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDA_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .LDA(0x02, X)
            .LDA(0x30, X)
            .LDA(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDX_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .LDX(0x1234)
            .LDX(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDX_AbsoluteY()
    {
        using var asm = new Mos6502Assembler()
            .LDX(0x1234, Y)
            .LDX(0xFF03, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDX_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .LDX_Imm(0x01)
            .LDX_Imm(0x42)
            .LDX_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDX_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .LDX(0x03)
            .LDX(0x20)
            .LDX(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDX_ZeroPageY()
    {
        using var asm = new Mos6502Assembler()
            .LDX(0x01, Y)
            .LDX(0x40, Y)
            .LDX(0xFC, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDY_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .LDY(0x1234)
            .LDY(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDY_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .LDY(0x1234, X)
            .LDY(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDY_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .LDY_Imm(0x01)
            .LDY_Imm(0x42)
            .LDY_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDY_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .LDY(0x03)
            .LDY(0x20)
            .LDY(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LDY_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .LDY(0x02, X)
            .LDY(0x30, X)
            .LDY(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LSR_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .LSR(0x1234)
            .LSR(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LSR_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .LSR(0x1234, X)
            .LSR(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LSR_Accumulator()
    {
        using var asm = new Mos6502Assembler()
            .LSR(A)
            .LSR()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LSR_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .LSR(0x03)
            .LSR(0x20)
            .LSR(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task LSR_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .LSR(0x02, X)
            .LSR(0x30, X)
            .LSR(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task NOP_Implied()
    {
        using var asm = new Mos6502Assembler()
            .NOP()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ORA_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .ORA(0x1234)
            .ORA(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ORA_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .ORA(0x1234, X)
            .ORA(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ORA_AbsoluteY()
    {
        using var asm = new Mos6502Assembler()
            .ORA(0x1234, Y)
            .ORA(0xFF03, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ORA_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .ORA_Imm(0x01)
            .ORA_Imm(0x42)
            .ORA_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ORA_IndirectX()
    {
        using var asm = new Mos6502Assembler()
            .ORA(_[0x05, X])
            .ORA(_[0x20, X])
            .ORA(_[0xFF, X])
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ORA_IndirectY()
    {
        using var asm = new Mos6502Assembler()
            .ORA(_[0x06], Y)
            .ORA(_[0x30], Y)
            .ORA(_[0xFE], Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ORA_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .ORA(0x03)
            .ORA(0x20)
            .ORA(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ORA_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .ORA(0x02, X)
            .ORA(0x30, X)
            .ORA(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task PHA_Implied()
    {
        using var asm = new Mos6502Assembler()
            .PHA()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task PHP_Implied()
    {
        using var asm = new Mos6502Assembler()
            .PHP()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task PLA_Implied()
    {
        using var asm = new Mos6502Assembler()
            .PLA()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task PLP_Implied()
    {
        using var asm = new Mos6502Assembler()
            .PLP()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ROL_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .ROL(0x1234)
            .ROL(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ROL_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .ROL(0x1234, X)
            .ROL(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ROL_Accumulator()
    {
        using var asm = new Mos6502Assembler()
            .ROL(A)
            .ROL()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ROL_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .ROL(0x03)
            .ROL(0x20)
            .ROL(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ROL_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .ROL(0x02, X)
            .ROL(0x30, X)
            .ROL(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ROR_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .ROR(0x1234)
            .ROR(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ROR_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .ROR(0x1234, X)
            .ROR(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ROR_Accumulator()
    {
        using var asm = new Mos6502Assembler()
            .ROR(A)
            .ROR()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ROR_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .ROR(0x03)
            .ROR(0x20)
            .ROR(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task ROR_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .ROR(0x02, X)
            .ROR(0x30, X)
            .ROR(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task RTI_Implied()
    {
        using var asm = new Mos6502Assembler()
            .RTI()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task RTS_Implied()
    {
        using var asm = new Mos6502Assembler()
            .RTS()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SBC_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .SBC(0x1234)
            .SBC(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SBC_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .SBC(0x1234, X)
            .SBC(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SBC_AbsoluteY()
    {
        using var asm = new Mos6502Assembler()
            .SBC(0x1234, Y)
            .SBC(0xFF03, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SBC_Immediate()
    {
        using var asm = new Mos6502Assembler()
            .SBC_Imm(0x01)
            .SBC_Imm(0x42)
            .SBC_Imm(0xFF)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SBC_IndirectX()
    {
        using var asm = new Mos6502Assembler()
            .SBC(_[0x05, X])
            .SBC(_[0x20, X])
            .SBC(_[0xFF, X])
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SBC_IndirectY()
    {
        using var asm = new Mos6502Assembler()
            .SBC(_[0x06], Y)
            .SBC(_[0x30], Y)
            .SBC(_[0xFE], Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SBC_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .SBC(0x03)
            .SBC(0x20)
            .SBC(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SBC_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .SBC(0x02, X)
            .SBC(0x30, X)
            .SBC(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SEC_Implied()
    {
        using var asm = new Mos6502Assembler()
            .SEC()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SED_Implied()
    {
        using var asm = new Mos6502Assembler()
            .SED()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task SEI_Implied()
    {
        using var asm = new Mos6502Assembler()
            .SEI()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STA_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .STA(0x1234)
            .STA(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STA_AbsoluteX()
    {
        using var asm = new Mos6502Assembler()
            .STA(0x1234, X)
            .STA(0xFF02, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STA_AbsoluteY()
    {
        using var asm = new Mos6502Assembler()
            .STA(0x1234, Y)
            .STA(0xFF03, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STA_IndirectX()
    {
        using var asm = new Mos6502Assembler()
            .STA(_[0x05, X])
            .STA(_[0x20, X])
            .STA(_[0xFF, X])
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STA_IndirectY()
    {
        using var asm = new Mos6502Assembler()
            .STA(_[0x06], Y)
            .STA(_[0x30], Y)
            .STA(_[0xFE], Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STA_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .STA(0x03)
            .STA(0x20)
            .STA(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STA_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .STA(0x02, X)
            .STA(0x30, X)
            .STA(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STX_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .STX(0x1234)
            .STX(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STX_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .STX(0x03)
            .STX(0x20)
            .STX(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STX_ZeroPageY()
    {
        using var asm = new Mos6502Assembler()
            .STX(0x01, Y)
            .STX(0x40, Y)
            .STX(0xFC, Y)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STY_Absolute()
    {
        using var asm = new Mos6502Assembler()
            .STY(0x1234)
            .STY(0xFF01)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STY_ZeroPage()
    {
        using var asm = new Mos6502Assembler()
            .STY(0x03)
            .STY(0x20)
            .STY(0xFE)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task STY_ZeroPageX()
    {
        using var asm = new Mos6502Assembler()
            .STY(0x02, X)
            .STY(0x30, X)
            .STY(0xFB, X)
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task TAX_Implied()
    {
        using var asm = new Mos6502Assembler()
            .TAX()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task TAY_Implied()
    {
        using var asm = new Mos6502Assembler()
            .TAY()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task TSX_Implied()
    {
        using var asm = new Mos6502Assembler()
            .TSX()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task TXA_Implied()
    {
        using var asm = new Mos6502Assembler()
            .TXA()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task TXS_Implied()
    {
        using var asm = new Mos6502Assembler()
            .TXS()
            .End();
        await VerifyAsm(asm);
    }
    
    [TestMethod]
    public async Task TYA_Implied()
    {
        using var asm = new Mos6502Assembler()
            .TYA()
            .End();
        await VerifyAsm(asm);
    }
    
}
